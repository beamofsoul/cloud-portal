spring:
  mvc:
    static-path-pattern: /static/**
  profiles:
    active:
      - prod
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    servlet:
      content-type: text/html; charset=utf-8
      
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      # Configure Main Scheduler Properties
      org.quartz.scheduler.instanceName: cloud-portal-scheduler
      org.quartz.scheduler.instanceId: AUTO # 如果使用集群，instanceId必须唯一，设置成AUTO
      org.quartz.scheduler.skipUpdateCheck: true
      # Configure ThreadPool
      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
      org.quartz.threadPool.threadCount: 10
      org.quartz.threadPool.threadPriority: 5
      # Configure JobStore
      org.quartz.jobStore.misfireThreshold: 60000
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX # 存储方式为数据库
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      org.quartz.jobStore.useProperties: true # 使用自己的配置文件
      org.quartz.jobStore.tablePrefix: T_QRTZ_
      org.quartz.jobStore.isClustered: false # 是否使用集群

swagger:
  api:
    title: Cloud-Portal Open API Documentation
    description: 
    version: 0.0.1-SNAPSHOT
    author:
      name: Mingshu Jian
      url: https://github.com/beamofsoul/cloud-portal
      email: beamofsoul@sina.com
      
logging:
  config: classpath:logback.xml
  
  
project:
  user:
    photo-path: D://rabbit//user_files//user_photo
  base:
    repository:
      provider: com.moraydata.general.management.repository.BaseMultielementRepositoryFactory
      batch:
        size: 30
    security:
      # Specifies the URLs to be required to login as the roles "adminRoles" matched 
      adminRoleMatchers:
       - /admin/**
      # Any one of the roles to require for adminRoleMatchers
      # Each of the roles should not start with "ROLE_" as this is automatically inserted
      # 只有角色ADMIN 和 MANAGER 可以访问后台
      adminRoles:
        - ADMIN
        - MANAGER
      # Allows adding RequestMatcher instances that do not to be required to login
      nonAuthenticatedMatchers:
        - /**
      # Specifies the URL to send users to if login is required
      loginPage: /login
      # Specifies where users will go after authenticating successfully
      defaultLoginSuccessUrl: /
      # true if the defaultSuccesUrl should be used after authentication despite
      # if a protected page had been previously visited
      alwaysUseDefaultSuccessUrl: true
      # The URL that will invoke logout
      logoutUrl: /logout
      # The URL to redirect to after logout has occurred.
      # The default is "/login?logout". 
      defaultLogoutSuccessUrl: /login
      # Controls the maximum number of sessions for a user.
      # The default is to allow any number of users.
      maximumSessions: 1
      # If true, prevents a user from authenticating when the maximumSessions(int) has been reached.
      # Otherwise (default), the user who authenticates is allowed access 
      # and an existing user's session is expired. 
      # The user's who's session is forcibly expired is sent to expiredUrl(String).
      # The advantage of this approach is if a user accidentally does not log out,
      # there is no need for an administrator to intervene or wait till their session expires.
      maxSessionsPreventsLogin: false
      # The URL to redirect to if a user tries to access a resource 
      # and their session has been expired due to too many sessions for the current user. 
      expiredUrl: /expired
      # Allows specifying how long (in seconds) a token is valid for, set as one week, defualt is two weeks
      tokenValiditySeconds: 604800
      # The HTTP parameter used to indicate to remember the user at time of login.
      rememberMeParameter: remember-me
      # The name of cookie which store the token for remember me authentication.
      # Defaults to 'remember-me'.
      rememberMeCookieName: rabbit
      # Allows adding RequestMatcher instances that should that Spring Security should ignore.
      # Web Security provided by Spring Security (including the SecurityContext) 
      # will not be available on HttpServletRequest that match.
      # Typically the requests that are registered should be that of only static resources.
      # For requests that are dynamic, consider mapping the request to allow all users instead. 
      ignoringMatchers:
        - /static/**
        - /**/favicon.ico
    wechat:
      service: # 支持微信服务号
        appId: wx7a2ffdf99b8bd18c # wx7a2ffdf99b8bd18c 公司账号 wx1fb4cf9f5f3385e7 测试账号
        appSecret: 7332143e8d281cc7588e510ae615cea5 #  7332143e8d281cc7588e510ae615cea5 公司密码 3889e726e00f19662e8b7e9cde4b5599 测试账号
        accessTokenUrl: https://api.weixin.qq.com/cgi-bin/token # 获取access_token的url
        ticketUrl: https://api.weixin.qq.com/cgi-bin/qrcode/create # 创建二维码ticket的url
        showQRCodeUrl: https://mp.weixin.qq.com/cgi-bin/showqrcode # 显示二维码的url
        createMenuUrl: https://api.weixin.qq.com/cgi-bin/menu/create # 创建服务号菜单的url
        connectOAuth2Menu4CodeUrl: https://open.weixin.qq.com/connect/oauth2/authorize # 创建每个菜单按钮携带重定向url并获取code所需的url
        snsOAuth2TokenAndOpenIdUrl: https://api.weixin.qq.com/sns/oauth2/access_token # 服务号菜单跳转通过code使用OAuth2方式获取access_token和openid的url
        sendTemplateMessageUrl: https://api.weixin.qq.com/cgi-bin/message/template/send # 发送模板消息所用的url
        templateMessage:
          publicSentiment: 259crn-Levvu-2VDe2jff43bHncbzyQC3LWCTpZCWBw # 推送舆情异常消息的模板Id
    business:
      publicSentiment:
        interfaceUrl: http://192.168.31.26/wxNotice/
    social: # 现在只支持微信开放平台OAuth2方式扫码登录系统
      # Make Spring Social component enabled or not
      enabled: false
      repository:
        # The table prefix string of userconnection table given by Spring Social
        tablePrefix: T_
      filter:
        # Filter url of third party login by the way of scanning qrcode
        url: /socialAuth
        # Once new user needed to signup rather than being created by system, this will be the signup url
        defaultFailureUrl: /signup
      # Authorization service provider  
      provider: weixin
      client:
        # Third party application id registered by authorization service provider 微信开放平台appId
        appId: wxd99431bbff8305a0
        # Third party application secret registered by authorization service provider 微信开放平台appSecret
        appSecret: 60f78681d063590a469f1b297feff3c4
      user:
        # Default password of new user which logged in by scanning qrcode
        defaultPassword: 123456
    message:
      enabled: true
      product: Dysmsapi # 产品名称:云通信短信API产品,开发者无需替换
      domain: dysmsapi.aliyuncs.com # 产品域名,开发者无需替换
      accessKeyId: LTAImyRL3hwgWVqo
      accessKeySecret: oeXnKT9SZZu4lx4bOTg0F1dVnwCHJT
      sendTimeout: 10000
      signName: 海鳗数据 # 签名
      verificationCodeTemplateCode: SMS_129763401 # 短信模板编码
    oauth2:
      enabled: true
      resourceIds: open_api # 内容无所谓，但是数据库表oauth_client_details每条记录的resource_ids属性值必须与其一致，否则无法识别用户想要访问的资源
      filterUrl: /open/** # 所有指向/open/**路径下资源的URL都将被要求进行认证，**通配符意味着任何形式